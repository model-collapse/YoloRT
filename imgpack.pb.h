// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imgpack.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_imgpack_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_imgpack_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_imgpack_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_imgpack_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_imgpack_2eproto;
class ImgPack;
class ImgPackDefaultTypeInternal;
extern ImgPackDefaultTypeInternal _ImgPack_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ImgPack* Arena::CreateMaybeMessage<::ImgPack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ImgPack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImgPack) */ {
 public:
  ImgPack();
  virtual ~ImgPack();

  ImgPack(const ImgPack& from);
  ImgPack(ImgPack&& from) noexcept
    : ImgPack() {
    *this = ::std::move(from);
  }

  inline ImgPack& operator=(const ImgPack& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImgPack& operator=(ImgPack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImgPack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImgPack* internal_default_instance() {
    return reinterpret_cast<const ImgPack*>(
               &_ImgPack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImgPack& a, ImgPack& b) {
    a.Swap(&b);
  }
  inline void Swap(ImgPack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImgPack* New() const final {
    return CreateMaybeMessage<ImgPack>(nullptr);
  }

  ImgPack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImgPack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImgPack& from);
  void MergeFrom(const ImgPack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImgPack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImgPack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_imgpack_2eproto);
    return ::descriptor_table_imgpack_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kImageFieldNumber = 4,
    kTimestampSendFieldNumber = 2,
    kTimestampRecvFieldNumber = 3,
  };
  // required string device_id = 1;
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // required bytes image = 4;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // required int64 timestamp_send = 2;
  bool has_timestamp_send() const;
  private:
  bool _internal_has_timestamp_send() const;
  public:
  void clear_timestamp_send();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_send() const;
  void set_timestamp_send(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_send() const;
  void _internal_set_timestamp_send(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 timestamp_recv = 3;
  bool has_timestamp_recv() const;
  private:
  bool _internal_has_timestamp_recv() const;
  public:
  void clear_timestamp_recv();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_recv() const;
  void set_timestamp_recv(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp_recv() const;
  void _internal_set_timestamp_recv(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ImgPack)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_send_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_recv_;
  friend struct ::TableStruct_imgpack_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImgPack

// required string device_id = 1;
inline bool ImgPack::_internal_has_device_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImgPack::has_device_id() const {
  return _internal_has_device_id();
}
inline void ImgPack::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImgPack::device_id() const {
  // @@protoc_insertion_point(field_get:ImgPack.device_id)
  return _internal_device_id();
}
inline void ImgPack::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:ImgPack.device_id)
}
inline std::string* ImgPack::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:ImgPack.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& ImgPack::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void ImgPack::_internal_set_device_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImgPack::set_device_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImgPack.device_id)
}
inline void ImgPack::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImgPack.device_id)
}
inline void ImgPack::set_device_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImgPack.device_id)
}
inline std::string* ImgPack::_internal_mutable_device_id() {
  _has_bits_[0] |= 0x00000001u;
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImgPack::release_device_id() {
  // @@protoc_insertion_point(field_release:ImgPack.device_id)
  if (!_internal_has_device_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImgPack::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:ImgPack.device_id)
}

// required int64 timestamp_send = 2;
inline bool ImgPack::_internal_has_timestamp_send() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImgPack::has_timestamp_send() const {
  return _internal_has_timestamp_send();
}
inline void ImgPack::clear_timestamp_send() {
  timestamp_send_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImgPack::_internal_timestamp_send() const {
  return timestamp_send_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImgPack::timestamp_send() const {
  // @@protoc_insertion_point(field_get:ImgPack.timestamp_send)
  return _internal_timestamp_send();
}
inline void ImgPack::_internal_set_timestamp_send(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_send_ = value;
}
inline void ImgPack::set_timestamp_send(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_send(value);
  // @@protoc_insertion_point(field_set:ImgPack.timestamp_send)
}

// required int64 timestamp_recv = 3;
inline bool ImgPack::_internal_has_timestamp_recv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImgPack::has_timestamp_recv() const {
  return _internal_has_timestamp_recv();
}
inline void ImgPack::clear_timestamp_recv() {
  timestamp_recv_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImgPack::_internal_timestamp_recv() const {
  return timestamp_recv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ImgPack::timestamp_recv() const {
  // @@protoc_insertion_point(field_get:ImgPack.timestamp_recv)
  return _internal_timestamp_recv();
}
inline void ImgPack::_internal_set_timestamp_recv(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_recv_ = value;
}
inline void ImgPack::set_timestamp_recv(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp_recv(value);
  // @@protoc_insertion_point(field_set:ImgPack.timestamp_recv)
}

// required bytes image = 4;
inline bool ImgPack::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImgPack::has_image() const {
  return _internal_has_image();
}
inline void ImgPack::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImgPack::image() const {
  // @@protoc_insertion_point(field_get:ImgPack.image)
  return _internal_image();
}
inline void ImgPack::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:ImgPack.image)
}
inline std::string* ImgPack::mutable_image() {
  // @@protoc_insertion_point(field_mutable:ImgPack.image)
  return _internal_mutable_image();
}
inline const std::string& ImgPack::_internal_image() const {
  return image_.GetNoArena();
}
inline void ImgPack::_internal_set_image(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImgPack::set_image(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImgPack.image)
}
inline void ImgPack::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImgPack.image)
}
inline void ImgPack::set_image(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImgPack.image)
}
inline std::string* ImgPack::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000002u;
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImgPack::release_image() {
  // @@protoc_insertion_point(field_release:ImgPack.image)
  if (!_internal_has_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return image_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImgPack::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:ImgPack.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_imgpack_2eproto
